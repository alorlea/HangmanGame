/*
 * ConnectionWindow.java
 *
 * Created on 08-nov-2011, 18:02:19
 */
package client;

import java.net.Socket;
import javax.swing.JOptionPane;



/**
 *
 * @author Fernando Garcia and Alberto Lorente
 */
public class ConnectionWindow
   extends javax.swing.JFrame
{
   /** Creates new form ConnectionWindow */
   public ConnectionWindow()
   {
      initComponents();
   }


   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ipTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Connection Parameters");
        setResizable(false);

        jLabel1.setText("IP Address:");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("Port:");
        jLabel2.setName("jLabel2"); // NOI18N

        ipTextField.setText("localhost");
        ipTextField.setToolTipText("IP Address of the server");
        ipTextField.setName("ipTextField"); // NOI18N
        ipTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButton_OnClick(evt);
            }
        });

        portTextField.setText("22569");
        portTextField.setName("portTextField"); // NOI18N
        portTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButton_OnClick(evt);
            }
        });

        connectButton.setText("Connect");
        connectButton.setName("connectButton"); // NOI18N
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButton_OnClick(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.setName("exitButton"); // NOI18N
        exitButton.setPreferredSize(new java.awt.Dimension(72, 30));
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButton_OnClick(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(portTextField)
                            .addComponent(ipTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(connectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectButton)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private void exitButton_OnClick(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitButton_OnClick
   {//GEN-HEADEREND:event_exitButton_OnClick
      this.dispose();
      System.exit(0);
   }//GEN-LAST:event_exitButton_OnClick

   private void connectButton_OnClick(java.awt.event.ActionEvent evt)//GEN-FIRST:event_connectButton_OnClick
   {//GEN-HEADEREND:event_connectButton_OnClick
      Socket clientSocket = connectToServer();
      if (clientSocket == null)
      {
         JOptionPane.showMessageDialog(this, "No server found with the given "
            + "parameters.");
      }
      else
      {
         GameClient gameWindow = new GameClient(this, clientSocket);
         gameWindow.setVisible(true);
         this.setVisible(false);
      }
   }//GEN-LAST:event_connectButton_OnClick


   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
   {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try
      {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
         {
            if ("Nimbus".equals(info.getName()))
            {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }



      catch (ClassNotFoundException ex)
      {
         java.util.logging.Logger.getLogger(ConnectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }      catch (InstantiationException ex)
      {
         java.util.logging.Logger.getLogger(ConnectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }      catch (IllegalAccessException ex)
      {
         java.util.logging.Logger.getLogger(ConnectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }      catch (javax.swing.UnsupportedLookAndFeelException ex)
      {
         java.util.logging.Logger.getLogger(ConnectionWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
         public void run()
         {
            new ConnectionWindow().setVisible(true);
         }


      });
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField ipTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField portTextField;
    // End of variables declaration//GEN-END:variables


    /**
     * Checks wether the IP address and port number are not empty and they
     * correspond to the address of a server and the port where the server
     * is listening to. If everything is OK, a connection with the server
     * is established.
     * @return The socket where the connection has been established. Null if it
     * was impossible.
     */
   private Socket connectToServer()
   {
      Socket clientSocket = null;
      
      
      String ip = ipTextField.getText();
      
      if (ip == null || ip.isEmpty())
         return clientSocket;
      
      int port;
      try
      {
         port = Integer.parseInt(portTextField.getText());
      }
      catch(NumberFormatException ex)
      {
         return clientSocket;
      }
      
      try
      {
         clientSocket = new Socket(ip, port);
      }
      catch (Exception ex)
      {
         return clientSocket;
      }
      
      return clientSocket;
   }
}
